name: release

# release process:
#
# on main branch merge:
# 1. Calculate next semantic version tag (autotag)
# 2. Build and push Dockerfile.base (ghcr.io/planetscale/ghcommit-action)
# 3. Update version tag in Dockerfile, commit change
# 4. Create GitHub Release for the new version

on:
  push:
    branches:
      - main
    paths:
      - action.yaml
      - '**.sh'
      - Dockerfile
      - Dockerfile.base
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    if: >
      (github.event_name == 'push' && !contains(toJson(github.event.commits), '[ci skip]') && !contains(toJson(github.event.commits), '[skip ci]'))
      || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - run: make lint
      - run: make test

  release:
    runs-on: ubuntu-latest
    needs: [test]

    permissions:
      contents: write
      packages: write

    steps:
      - name: checkout code with full history (unshallow)
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Calculate new version with autotag
        run: |
          set -xeou pipefail

          curl -sL https://git.io/autotag-install | sh -s -- -b "${RUNNER_TEMP}/bin"
          new_version=$(${RUNNER_TEMP}/bin/autotag -n)
          echo "new_version=$new_version" >> $GITHUB_ENV

      - name: login to ghcr.io
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # setup qemu and buildx for cross-builds (arm64)
      - name: Set up QEMU (for arm64 builds)
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3

      - name: Build and push Dockerfile.base (ghcr.io/planetscale/ghcommit-action)
        run: |
          # build and push a multi-arch image:
          image="ghcr.io/planetscale/ghcommit-action:v${new_version}"
          docker buildx build \
            -f Dockerfile.base \
            --platform linux/amd64,linux/arm64 \
            --output type=image,name=$image,oci-mediatypes=true,compression=zstd,push=true \
            .

      - name: Update image version in Dockerfile
        run: |
          sed -i'' -Ee "s/ghcommit-action:v(.*)/ghcommit-action:v${new_version}/" Dockerfile

      - name: Commit changes
        uses: planetscale/ghcommit-action@b808a75a44019963dc31f342b50e64e3b3f35ae1 # v0.2.6
        with:
          commit_message: "ðŸ¤– Bump version in Dockerfile"
          repo: ${{ github.repository }}
          branch: ${{ github.head_ref || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Create GitHub Release
        run: |
            gh release create "v${new_version}" --target main --title "v${new_version}" --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
